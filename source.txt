--importing the req files 
import org.apache.spark.sql.Row
import org.apache.spark.sql.DataFrame
import org.apache.spark.sql.types.{StructType,StructField,StringType,NumericType,IntegerType}

--geting the data from the hdfs and its header 
var SportsData =sc.textFile("/user/cloudera/19.1/Sports_data.txt")
val header = SportsData.first()
SportsData = SportsData.filter(row => row != header)

--Creating Schema column name and type 
val SchemaDataFrame = "FirstName:string,LastName:string,Sports:string,MedalType:string,Age:integer,Year:integer,Country:string"

--Creating Schema structure based on the schema type
val schema = StructType(SchemaDataFrame.split(",").map(fieldInfo=>StructField(fieldInfo.split(":")(0),if (fieldInfo.split(":")(1).equals("string")) StringType else IntegerType ,true)))

--Creating the rdd the will split the data in sports Data and map columns in rows as schema
val DataRow = SportsData.map(_.split(",")).map(x => Row(x(0), x(1), x(2), x(3), x(4).toInt, x(5).toInt, x(6)))

--creating the data frame form the DataRow and Schema before using sqlcontext object
val SportsDataDf = sqlContext.createDataFrame(DataRow,schema)

--Creating temp table form the DataFrame
SportsDataDf.registerTempTable("SportsData")

--Sql select command to view the content of the table
val sportsCData = sqlContext.sql("Select * from SportsData")

sportsCData.show()


--Problem 1
val GoldMedalWinners = sqlContext.sql("select count(*) as Gold_Medal_Winner,Year from SportsData where MedalType='gold' group by Year")

GoldMedalWinners.show()


--Problem 2
val SilverMedalUSA = sqlContext.sql("SELECT Sports,count(*) as SilverMeadalCount FROM SportsData where MedalType='silver' and Country = 'USA' group by Sports")

SilverMedalUSA.show()


